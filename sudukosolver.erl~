-module(sudukosolver).
-compile(export_all).

main() ->
 File = "suduko.txt",
 {ok,Bin} = file:read_file(File),

 Board = parse_board(Bin),
 test_Board(Board),
 GridMap = create_grid_map(Board, 1, []),
 %%print(GridMap),
 %%get_column_stack(1, GridMap, []),
 %% want a list of column lists, and a list of row lists
 Rows = get_rows(lists:seq(1,9), GridMap, []),
 Columns = get_columns(lists:seq(1,9), GridMap, []).
 %% need to create 3by3Grids.  more tricky, as they need a centre coord, then we can pattern match on it later on
 %% can pattern match on the tuple first element to find stack row ie {{1 etc.
 
parse_board(Bin) when is_binary(Bin) ->
parse_board(binary_to_list(Bin));
parse_board(Str) when is_list(Str) ->
[list_to_integer(X)||X <- string:tokens(Str,"\r\n\t ")].

%% creates our tuples per item
create_grid_map([],_, Acc) -> lists:reverse(Acc);
create_grid_map([B1, B2, B3, B4, B5, B6, B7, B8, B9|Rest], Y, Acc) ->
 List = [B1, B2, B3, B4, B5, B6, B7, B8, B9],
 create_grid_map(Rest, Y+1, create_row(List, 1, Y, Acc)). 

create_row([],_,_,Acc) -> Acc;
create_row([R|T], X, Y, Acc) ->
  create_row(T, X+1, Y, [{{X,Y}, R, is_fixed(R)} | Acc]).
 
is_fixed(V) -> 
 if V == 0 -> "false";
  true -> "true"
  end.

%% get a list of column stacks
get_columns([],_, Stacks) -> lists:reverse(Stacks); 
get_columns([C|T], Map, Stacks) ->
 get_columns(T,Map, [get_stack({C, -1}, Map,[])|Stacks]).
%% get a list of row stacks
get_rows([],_, Stacks) -> lists:reverse(Stacks);
get_rows([C|T], Map, Stacks) ->
 get_rows(T, Map,[get_stack({-1, C}, Map,[]) |Stacks]).

get_stack(_,[], Stack) -> lists:reverse(Stack);
get_stack(Exp, [Map|T], Stack) ->
 Resp = contains_value(Map,Exp),
 if Resp == true ->
  get_stack(Exp, T, [Map|Stack]);
 true -> get_stack(Exp, T, Stack)
 end. 

contains_value({{X,Y},_,_}, {Col,Row}) ->
 if X == Col -> true;
    Y == Row -> true;
 true -> false
 end. 
       
%% some basic tests to ensure board is valid before starting
test_Board(Board) when length(Board) == 81 ->  "Ok";
test_Board(Board) when length(Board) < 81 -> erlang:error("Board too small");
test_Board(Board) when length(Board) > 81 -> erlang:error("Board too large").
   
%% print function for testing
print([]) ->  io:format("End ~n", []);
print([GridMap|T]) ->
{{X,Y},V,F} = GridMap,
 io:format("Value is ~w For Cell ~w  ~w , fixed = ~s ~n", [V,X,Y,F]),
 print(T). 
 





   









